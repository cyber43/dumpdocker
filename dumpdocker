#!/bin/bash
#
# dumpdocker
# - creates docker image based on tar file for analysis of crash dump 
# 
# Requirements:
# - gdb, strace
#
# Usage:
# dumpdocker [-h] exec_bin core_file
#
# Author: Jerry Park <jaehwa@gmail.com>
# Created on Mon Aug  4 11:23:32 KST 2014
# Last updated at Fri Aug  7 09:32:55 KST 2015
#set -x

prog=$(basename $0)
prog_dir=$(dirname $0)

execbin=$(basename $1)
execbin_dir=$(dirname $1)
corefile=$(basename $2)
corefile_dir=$(dirname $2)

usage() {
	echo "Usage: $prog [-h] $PWD/exec_bin core_file"
	echo "    -h		display the usage of $prog"
	echo ""
}

while getopts h opt ; do
        case "$opt" in
        	h) usage; exit 0 ;;
        	*) usage; exit 1 ;;
        esac
done

if [ "$#" -eq "0" ]; then
	usage; exit 1
elif [ "$#" -lt "2" ]; then
	usage; exit 1
fi

if [ ! -x $1 ]; then
	usage
	echo "$prog: please input correct executable binary as exec_bin"
	echo ""
	exit 2
fi

DATE=$(date +%Y%m%d%H%M)
UNAME=$(uname -n)
BINNAME=$(basename $1)

check_links() {
	# check the file whether it is a symbolic link file or not
	local file="$1"
	
	if [[ -L $file ]]; then
		echo $file 
		readlink -f $file
	else
		echo $file
	fi
}

check_path() {
	# find the path of the given file
	local command="$1"

	which $command
}

find_shlibs() {
	# find the list of shared libraries and binaries for the given file
	local file="$1"

	check_links $file
	ldd_files=$(ldd $file | grep "\/" | awk '{if ($2=="=>") print $3; if ($2!="=>") print $1}')
	for shlibs in $ldd_files
	do
		check_links $shlibs
	done
}

file="$1"
core="$2"

# find shared libraries for the given file from info shared command of gdb
found_shlibs+=" "
found_shlibs+=$(check_links $file) 

#gdb $file $core -x gdb.cmd > /dev/null
gdb $file $core >> /dev/null <<EOF
set height 0
set width 0
set logging file /tmp/d.gdb.tmp
set logging on
info shared
set logging off
quit
EOF

for sharedlibs in $(grep "\/" /tmp/d.gdb.tmp | awk -F' /' '{print "/"$2}')
do
	found_shlibs+=" "
	found_shlibs+=$(check_links $sharedlibs)
done

# basic commands for docker image
basic_cmds="bash ls cp grep cat diff tail head less vi awk bc strace rm mkdir date printf echo cut tr wc dirname basename python"

for commands in $(echo $basic_cmds)
do
	found_shlibs+=" "
	found_shlibs+=$(find_shlibs $(check_links $(check_path $commands)))
done

alternative_files=$(find /etc/alternatives)
for files in $alternative_files
do
	if [ -f $files ]; then
		found_shlibs+=" "$files
	fi
done	

# gather the shared libraries and binaries related with gdb
gdb_bin=$(which gdb)
found_shlibs+=" "
found_shlibs+=$(find_shlibs $gdb_bin)

python_ver=$(ldd $gdb_bin | grep python | awk '{print $1}' | cut -c 4-12)

# get the list of gdb package contents
dpkg_bin=$(which dpkg 2>/dev/null)
rpm_bin=$(which rpm 2>/dev/null)

if [ "x$dpkg_bin" != "x" ] && [ -x $dpkg_bin ]; then
	$dpkg_bin -l gdb >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		$dpkg_bin -L gdb > /tmp/d.pkg.$$ 2>/dev/null
	else
		echo "Couldn't find gdb package."
		exit 1
	fi
elif [ "x$rpm_bin" != "x" ] && [ -x $rpm_bin ]; then
	$rpm_bin -q gdb	>/dev/null 2>&1
	if [ $? -eq 0 ]; then
		$rpm_bin -qvl gdb | awk '{print $9}' > /tmp/d.pkg.$$ 2>/dev/null
	else
		echo "Couldn't find gdb package."
		exit 1
	fi
else
	echo "Couldn't find dpkg and rpm binary."
	exit 1
fi

for pkg_files in $(cat /tmp/d.pkg.$$)
do
	if [ -f $pkg_files ]; then
		found_shlibs+=" "
		found_shlibs+="$pkg_files"
	fi
done

# check the files which has opened by gdb
strace $gdb_bin -h >/dev/null 2>/tmp/d.$$ 

gdb_files=$(grep "^open(\"" /tmp/d.$$ | egrep -iv "ENOENT|ENOTDIR|\/dev|\/proc|\/tmp" | awk -F'"' '{print $2}')
for files in $gdb_files
do
	if [ -f $files ]; then
		if [ -x $files ]; then
			found_shlibs+=" "
			found_shlibs+=$(find_shlibs $files)
		fi
		found_shlibs+=" "$files
	fi
done

# add the files of python for gdb
python_files=$(find /usr/lib/$python_ver)
for files in $python_files
do
	if [ -f $files ]; then
		found_shlibs+=" "$files
	fi
done	

# create gdbinit.mac for firstpass.sh
DUMPDOCKER_DIR="/opt/dumpdocker"
if [ -d $DUMPDOCKER_DIR ]; then
	rm -rf $DUMPDOCKER_DIR
fi
mkdir $DUMPDOCKER_DIR
cat >> $DUMPDOCKER_DIR/gdbinit.mac <<EOF
file $1
core-file /dump/$corefile
set height 0
set width 0
EOF

cp $prog_dir/firstpass/firstpass.sh $DUMPDOCKER_DIR/firstpass.sh

found_shlibs+=" $DUMPDOCKER_DIR/firstpass.sh"
found_shlibs+=" $DUMPDOCKER_DIR/gdbinit.mac"

# gather the files of list and archive them into tar file for docker image
echo $found_shlibs | tr " " "\n" | sort -u | tar cvf ${UNAME}.${BINNAME}.${DATE}.tar --files-from -

# remove the temporary files
rm /tmp/d.$$
rm /tmp/d.*.$$
rm /tmp/d.*.tmp
exit 0
